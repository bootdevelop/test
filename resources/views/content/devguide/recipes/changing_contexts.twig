<h2 id="changing-contexts">Changing contexts in Ceres</h2>

<div class="api-docs-basics">

<p>
    Contexts provided by your own theme plugin can overwrite and extend the PHP context classes of the template plugin Ceres without creating a data provider and linking the content with a template container.
    Simply extend the ServiceProvider of your plugin and import your context resource into Ceres.
</p>
</div>

<!-- Code example -->
<div class="route-container">
    <code>Theme/Providers/ThemeServiceProvider.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums code-example">

  namespace Theme\Providers;

  use IO\Helper\TemplateContainer;
  use Plenty\Plugin\Events\Dispatcher;
  use Plenty\Plugin\ServiceProvider;
  use Plenty\Plugin\Templates\Twig;
  use Theme\Contexts\MyContext;

  class ThemeServiceProvider extends ServiceProvider
  {

  	/**
  	 * Register the service provider.
  	 */
  	public function register()
  	{

  	}

  	public function boot(Twig $twig, Dispatcher $eventDispatcher)
      {
          /**
          * Extend the context for the basket template with MyContext.
          */
          $eventDispatcher->listen('IO.ctx.basket', function (TemplateContainer $templateContainer, $templateData = [])
          {
              $templateContainer->setContext( MyContext::class);
              return false;
          }, 0);
      }
  }

</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<div class="alert alert-info" role="alert">
    <b>Explanation</b>: Add the dependencies for the <code>TemplateContainer</code>, the <code>Dispatcher</code> and <code>Twig</code> classes.<br /><br />Add the <code>boot()</code> function and use the dispatcher for listening to the context event <code>IO.ctx.TEMPLATENAME</code>. Specify the template for which you want to modify the context, e.g. <code>IO.ctx.basket</code>. Use the <code>setContext()</code> method and specify which context should be used, e.g. MyContext. In your context, define the elements to be added to the PHP context classes of Ceres. You can find an example for how the context class MyContext extends the GlobalContext below.
</div>

<div class="route-container">
    <code>Theme/src/Contexts/MyContext.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums code-example">

&lt;?php

namespace Theme\Contexts;

use IO\Helper\ContextInterface;

class MyContext extends GlobalContext implements ContextInterface
{
    public $myVariable;

    public function init($params)
    {
        parent::init($params);

		$this->myVariable = “This is how you extend context classes.“;
    }
}

</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<div class="alert alert-info" role="alert">
    <b>Explanation</b>: The context class MyContext now extends the GlobalContext of Ceres, thereby inheriting the data that GlobalContext provides.
    Additionally, you are now able to transfer new data to the template via MyContext.
    In order to completely overwrite the context provided by Ceres, simply delete any <code>extends</code> elements in your own context.
</div>
<!-- Code example end -->
