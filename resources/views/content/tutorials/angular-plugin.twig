{% extends 'PlentyPluginShowcase::templates.ExamplePage' %} {% block Content %}

    <h1 id="introduction">How to Build your First Angular UI Plugin</h1>
    <div class="api-docs-basics">
        <p>
            This tutorial will show you how to build a plugin UI with Angular for the plentymarkets 7 backend. We will create this project based on a template we created,
            the plugin Terra-Basic.
        </p>
        <h3>Tutorial Content</h3>
        <div class="api-docs-basics">
            <ul>
                <li>
                    Angular basics. How to set up a basic Angular UI.
                </li>
                <li>
                    How to use REST calls addressing our plentymarkets database.
                </li>
                <li>
                    How to use the
                    <a href="#terra-components-info">Terra-Components</a>.
                </li>
            </ul>
        </div>
    </div>
    <h2 id="Setup-nodejs">
        1. Installing Node.js
    </h2>
    <div class="api-docs-basics">

        <p>Install the LTS version of Node.js.</p>
        <ul>
            <li>
                <a target="_blank" href="https://nodejs.org/en/download/">Download Node.js</a>
            </li>
        </ul>
        <p>Open your command line and run it. <br>
           &rarr; For Mac and Linux, it's terminal; for Windows, it's cmd.</p>
        <p class="command-line-code">node -v</p>
        <p> If the output looks like the following line, node.js is installed.</p>
        <p class="command-line-code">v8.9.4</p>
    </div>
    <h2 id="Setup-IDE">2. Setting up an IDE</h2>
    <div class="api-docs-basics">
        <p>We recommend to use Atom or Visual Code as IDE. </p>
        <ul>
            <li>
                <a href="https://atom.io/" target="_blank">Download Atom</a>
            </li>
            <li>
                <a href="https://code.visualstudio.com/" target="_blank">Download Visual Code</a>
            </li>
        </ul>
    </div>
    <h2 id="download-github-template">3. Download template</h2>
    <p>We created the plugin <strong>Terra-Basic</strong> which includes a basic Angular application.</p>
    <p>This template also includes all packages used in the tutorial. The
        <a href="#terra-components-info">Terra-Components</a>
       are already installed.
    </p>
    <ul>
        <li>
            <a href="https://github.com/plentymarkets/plugin-terra-basic" target="_blank">Download or clone plugin-terra-basic
            </a>
        </li>
    </ul>

    <h2 id="run-the-template">4. Setting up a local test environment</h2>
    <ol>
        <li>Open your IDE.</li>
        <li>Go to
            <strong>File&rarr;Open.</strong>
        </li>
        <li>Select the downloaded 'Plugin-Terra-Basic'.</li>
        <li>
            <p>Use the command line to navigate to the 'Plugin-Terra-Basic' directory.</p>
            <p class="command-line-code">
                cd /your-dir/plugin-terra-basic
            </p>
        </li>
        <li>
            <p>Run the following command to install all required packages. This may take some time.</p>
            <p class="command-line-code">
                npm install
            </p>
        </li>
        <li>
            <p>Start your local test server.</p>
            <p class="command-line-code">
                npm start
            </p>
        </li>
        <li>
            <p>The project is now compiled and will be shown in your browser on
                <strong>localhost:3002</strong>.
            </p>
            <p>&rarr; You can change the port in the file <strong>/plugin-terra-basic/config/webpack.dev.js </strong>.</p>
            <img class="img-responsive img-pretty"
                 src="{{ plugin_path('PlentyPluginShowcase') }}/images/tutorials/plugin-terra-basic-startpage.png">
        </li>
    </ol>
    <h2 id="terra-components-info">Terra Components</h2>
    <p>We developed the Terra-Components for the Terra back end of plentymarkets 7.</p>
    <p>The Terra-Components are in constant development and we improve and enhance them every day.</p>
    <p>Terra-Components documentation:</p>
    <ul>
        <li>
            <a href="https://developers.plentymarkets.com/terra-doc/components" target="_blank">Terra-Components</a>
        </li>
        <li>
            <a href="https://developers.plentymarkets.com/terra-doc/icons" target="_blank">Icons</a>
        </li>
        <li>
            <a href="https://www.npmjs.com/package/@plentymarkets/terra-components" target="_blank">Npm</a>
        </li>
        <li>
            <a href="https://github.com/plentymarkets/terra-components" target="_blank">Github</a>
        </li>
    </ul>
    <p>If you have any issues with our Terra-Components, the fastest way to get a response from our Terra dev team is to create an issue in our
        <a href="https://github.com/plentymarkets/terra-components/issues" target="_blank">github repository</a>
       .
    </p>
    <h2 id="plugin-view-basic">5. Creating a plugin view </h2>
    <div class="api-docs-basics">
        <p>If you are new to Angular, we recommend checking out the
            <a href="https://angular.io/tutorial" target="_blank">
                angular.io tutorial: Tour of Heroes
            </a>
           .
        </p>
        <ol>
            <li>Open your IDE file browser and navigate to the views folder.</li>
            <li>Open the folder, create a new directory and name it stats-view.</li>
            <li>In the new directory, create the following three files.
                <ul>
                    <li>
                        <strong>stats-view.component.html </strong>
                        <br> &rarr; This file is used to display your UI.
                    </li>
                    <li>
                        <strong>stats-view.component.scss</strong>
                        <br> &rarr; This file is used to style your UI.
                    </li>
                    <li>
                        <strong>stats-view.component.ts</strong>
                        <br> &rarr; This file is used to handle all your component logic.
                    </li>
                </ul>
            </li>
        </ol>
    </div>

    <div class="api-docs-basics">
        <p>When you're done the folder structure should look like this.</p>
        <div class="code-container">
        <pre class="prettyprint lang-plain grey-back">
plugin-terra-basic/
    └──src/
        └── app/
            └── views/
                └── stats-view/
                    ├── stats-view.component.html
                    ├── stats-view.component.scss
                    └── stats-view.component.ts
</pre>
        </div>
    </div>
    <h3 id="typescript">
        Creating the component
    </h3>
    <p>To create the stats-view component, start with the typescript file.</p>
    <div class="route-container">
        <code>src/app/views/stats-view.component.ts</code>
    </div>
    <div class="code-container">
    <pre class="prettyprint lang-js grey-back linenums code-example">
import {
    Component,
    OnInit
} from '@angular/core';

@Component({
               selector: 'stats-view',
               template: require('./stats-view.component.html'),
               styles:   [require('./stats-view.component.scss')]
           })
export class StatsViewComponent implements OnInit
{
    constructor()
    {
    }

    public ngOnInit():void
    {
    }
}
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>
    <p>Usage of the typescript file</p>
    <div class="api-docs-basics">
        <ul>
            <li>The typescript file and its class are the main part of your component.</li>
            <li>In the class, you connect the html add scss file, name the selector and write your logic.</li>
        </ul>
    </div>
    <h3 id="ngmodule">
        NgModule
    </h3>
    <div class="api-docs-basics">
        <p>In this step, you will link the stats-view component to the NgModule.<br>
           &rarr; NgModule: Defines a module that contains components, directives, pipes, and providers.
        </p>

        <ol>
            <li>Navigate to the <strong>plugin-terra-basic.module.ts</strong></li>
            <li>Import the StatsViewComponent, line <strong>13</strong>.</li>
            <li>Add the StatsViewComponent to the NgModule declarations, line <strong>26</strong>.</li>
        </ol>
        <div class="route-container">
            <code>src/app/plugin-terra-basic.module.ts</code>
        </div>
        <div class="code-container">
    <pre class="prettyprint lang-js grey-back linenums code-example">
import {
    APP_INITIALIZER,
    NgModule
} from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { PluginTerraBasicComponent } from './plugin-terra-basic.component';
import { TerraComponentsModule } from '@plentymarkets/terra-components/app/terra-components.module';
import { HttpModule } from '@angular/http';
import { TranslationModule } from 'angular-l10n';
import { FormsModule } from '@angular/forms';
import { LocalizationConfig } from './core/localization/terra-localization.config';
import { StartComponent } from './views/start/start.component';
import { StatsViewComponent } from './views/stats-view/stats-view.component'; // <--- Import the component

@NgModule({
    imports:      [
        BrowserModule,
        HttpModule,
        FormsModule,
        TranslationModule.forRoot(),
        TerraComponentsModule.forRoot()
    ],
    declarations: [
        PluginTerraBasicComponent,
        StartComponent,
        StatsViewComponent           // <--- declare the component, so that you can use it in your project.
    ],
    providers:    [
        LocalizationConfig,
        {
            provide:    APP_INITIALIZER,
            useFactory: initLocalization,
            deps:       [LocalizationConfig],
            multi:      true
        }
    ],
    bootstrap:    [
        PluginTerraBasicComponent
    ]
})
export class PluginTerraBasicModule
{
}

export function initLocalization(localizationConfig:LocalizationConfig):Function
{
    return () => localizationConfig.load();
}
</pre>
            <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
        </div>
    </div>
    <h3 id="display-component">Displaying the component</h3>
    <div class="api-docs-basics">
        <p>Open the <strong>plugin-terra-basic.component.html</strong></p>
        <p>Replace
            <code>&lt;start&gt;&lt;/start&gt;</code>
           with
            <code>&lt;stats-view&gt;&lt;/stats-view&gt;</code>
           .
        </p>
        <div class="route-container">
            <code>src/app/plugin-terra-basic.component.html</code>
        </div>
        <div class="code-container">
<pre class="prettyprint lang-html grey-back linenums code-example">
&lt;stats-view&gt;&lt;/stats-view&gt;
</pre>
        </div>
    </div>
    <h3 id="ui">Creating the UI</h3>
    <p>Open the <strong>stats-view.component.html.</strong>
    </p>
    <p>In the next step, you will create a basic Angular UI with
        <a href="#terra-components-info">Terra-Components</a>
       .
    </p>
    <p>Terra uses the
        <a href="https://getbootstrap.com/docs/4.0/layout/grid/" target="_blank">bootstrap grid system</a>
       to form the UI.
    </p>
    <div class="route-container">
        <code>src/app/views/stats-view.component.html</code>
    </div>
    <div class="code-container">
    <pre class="prettyprint lang-html grey-back linenums code-example">
&lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-sm-12&quot;&gt;
            &lt;terra-base-toolbar&gt;
                &lt;terra-button inputIcon=&quot;icon-refresh&quot;
                              inputTooltipText=&quot;fetch data&quot;
                              inputTooltipPlacement=&quot;right&quot;&gt;
                &lt;/terra-button&gt;
            &lt;/terra-base-toolbar&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-sm-12&quot;&gt;
            &lt;terra-portlet inputPortletHeader=&quot;User information&quot;&gt;
                 &lt;div class=&quot;center&quot;&gt;
                    &lt;terra-loading-spinner&gt;&lt;/terra-loading-spinner&gt;
                 &lt;/div&gt;
            &lt;/terra-portlet&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-sm-6&quot;&gt;
            &lt;terra-portlet inputPortletHeader=&quot;Installed webstores&quot;&gt;
               &lt;p&gt;
                    Lorem ipsum dolor sit amet, consetetur sadipscing elitr,
                    sed diam nonumy eirmod tempor invidunt ut labore et
                    dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et
               &lt;/p&gt;
            &lt;/terra-portlet&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-sm-6&quot;&gt;
            &lt;terra-portlet inputPortletHeader=&quot;Installed plugins&quot; [inputIsCollapsable]=&quot;true&quot;&gt;
               &lt;p&gt;
                    Lorem ipsum dolor sit amet, consetetur sadipscing elitr,
                    sed diam nonumy eirmod tempor invidunt ut labore et
                    dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et
               &lt;/p&gt;
            &lt;/terra-portlet&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>
    <h3 id="style-ui">Styling the UI</h3>
    <p>To style the UI, we will use scss which basically is css with more features.
        <a href="https://sass-lang.com/" target="_blank">learn more</a>
    </p>

    <div class="route-container">
        <code>src/app/views/stats-view.component.scss</code>
    </div>
    <div class="code-container">
    <pre class="prettyprint lang-css grey-back linenums code-example">
.center
{
    display: flex;
    justify-content: center;
    align-items: center;
}
.user-information-container
{
    padding:10px;
}
.content
{
    min-height: 15vh;
    td
    {
        padding: 5px;
    }
    th
    {
        padding: 5px;
    }
}
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>
    <h2 id="plugin-view-advanced">6. How to use REST API</h2>
    <div class="api-docs-basics">
        <p>In this step, you will use REST calls addressing our plenty database.</p>
        <p>In the first step, you create an Angular service which handles the REST logic.</p>
        <p>Go to your stats-view directory and add a new typescript file.</p>
    </div>
    <p>The new directory structure should now look like this.</p>
    <div class="code-container">
    <pre class="prettyprint lang-plain grey-back">
plugin-terra-basic/
    └──src/
        └── app/
            └── views/
                └── stats-view/
                    ├── stats-view.component.html
                    ├── stats-view.component.scss
                    ├── stats-view.component.ts
                    └── stats-view.service.ts
</pre>
    </div>
    <h3 id="create-a-service">1. Creating a service</h3>
    <div class="route-container">
        <code>src/app/views/stats-view.service.ts</code>
    </div>
    <div class="code-container">
    <pre class="prettyprint lang-js grey-back linenums code-example">
import { Injectable } from '@angular/core';
import { Http } from '@angular/http';
import { Observable } from 'rxjs';
import {
    TerraBaseService,
    TerraLoadingSpinnerService
} from '@plentymarkets/terra-components';


@Injectable()
export class StatsDataService extends TerraBaseService
{
    public bearer:string;
    private _basePathUrl:string;
    constructor(private _loadingSpinnerService:TerraLoadingSpinnerService,
                private _http:Http)
    {
        super(_loadingSpinnerService, _http, '/rest/');
        if(process.env.ENV !== 'production')
        {
            // tslint:disable-next-line:max-line-length
            this.bearer = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjFlNTllODUxNjY1ZjNiZmMwY2JjZjQxY2ZmYWIzMmI1ZTYxYjQ0NTFjMzEwMTRlMTE4NGE0YTBhZjA2MzAwMDAxZDI0YzJiMzZmNWI5MTZkIn0.eyJhdWQiOiIxIiwianRpIjoiMWU1OWU4NTE2NjVmM2JmYzBjYmNmNDFjZmZhYjMyYjVlNjFiNDQ1MWMzMTAxNGUxMTg0YTRhMGFmMDYzMDAwMDFkMjRjMmIzNmY1YjkxNmQiLCJpYXQiOjE1MjA5MzMzNzksIm5iZiI6MTUyMDkzMzM3OSwiZXhwIjoxNTIxMDE5Nzc5LCJzdWIiOiIzIiwic2NvcGVzIjpbIioiXX0.sThmLl-Nfj4rbDp08EKKA187tgaC6AwyJG3yycco6wFI1wj-uMsmy5ycSFL10eDATDhex5jpAI-sJGctipRMJGrtLj4tnDj0nrJtTLV5AEXhdGvKKOhjy02osYCU6Bd8zIxE7I5m1J76LILs8ag8-u4OPFs4dOIxPW2CB4VRhTUc-HteBtP87rzRyhMLreIx8z72dICBIRSQ6jpx3r9TtlkY8T0RdAd_rb76QVu_Al5c9Bky4DAjLXR7NkQBN__tmu3e2Nd8RRFqf3UBHgxhw2MTgoswTpUXEnrxyoy_0UuYax6tHmZp1dkaYAvuyXSnLERlfiMnhfcbGe5XjG-Ou0htvDYWw2IgIgQvD1klqW7yT9RIUdJCtHiAMIe2PeCzf1-y5zjui93BMZ8RgPuLWz-YsA32V4Aw_F_jZSkku912bAhe5YigP5Qw_XSerXEU7S1NR0AJFJZB5C07j06rijubuoTViIsoNE_Ex_0QzdYiXKhqVo5NgWFVdxRV9fkIatd4zT6ppcL6Lq3bHohee0CZzl4N1k0jfm2o3Vo3EC1Exe9TReuGwroy47Q86sxmsiPx1h5XHlMSzVeK7jJMLWtMmX8teH2PdjVMVOJ7ystnHhzs-br_7hr6j02NBTv8KLXXtQOzVyrcwM6exHgiY8HmbXrbKUMtVzZojnMau6Q';
            this._basePathUrl = 'http://master.login.plentymarkets.com';
            this.url = this._basePathUrl + this.url;
        }
        this.setHeader();
    }

    public getRestCallData(restRoute:string):Observable &lt;Array&lt;any&gt;&gt;
    {
        this.setAuthorization();
        let url:string;
        url = this._basePathUrl + restRoute;

        return this.mapRequest(
            this.http.get(url, {
                headers: this.headers,
                body:    ''
            })
        );
    }

    private setHeader():void
    {
        if(this.bearer !== null && this.bearer.length > 0)
        {
            this.headers.set('Authorization', 'Bearer ' + this.bearer);
        }
    }
}
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>
    <div class="api-docs-basics">
        <p>To use the service and be able to send REST calls, you need to get an authentication token.</p>
        <ol>
            <li>Log in to your plentymarkets test system.</li>
            <li>Open your browser dev tools
                <code>right click >> inspect</code>
                .
            </li>
            <li>Go to
                <code>Application</code>
                .
            </li>
            <li>Open
                <code>Local Storage</code>
                .
            </li>
            <li>Click on your connection example: <strong>http://master.login.plentymarkets.com</strong>.</li>
            <li>This will open a list where you can copy the
                <code>accessToken</code>
                .
            </li>
            <li>Go to your stats-view.service.ts to line <strong>22</strong> and paste the copied token into the
                <code>bearer</code>
                variable.
            </li>
            <li>
                Change the <code>_basePathUrl</code> variable in line <strong>23</strong> and replace it with your plentymarkets test system url.
            </li>
        </ol>
        <p>You are ready to use the service. Unfortunately, the token will change every time your login session expires.</p>
        <p>So you may have to repeat this step several times.</p>
    </div>
    <h4>Linking your service to the module</h4>
    <div class="api-docs-basics">
        <p>In order to use the service at your stats-view component, you need to add the service to the NgModule.</p>
        <p>Import the service as shown in line <strong>14</strong>.</p>
        <p>Add the service to providers as shown in line <strong>37</strong>.</p>
        <div class="route-container">
            <code>src/app/plugin-terra-basic.module.ts</code>
        </div>
        <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
import {
    APP_INITIALIZER,
    NgModule
} from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { PluginTerraBasicComponent } from './plugin-terra-basic.component';
import { TerraComponentsModule } from '@plentymarkets/terra-components/app/terra-components.module';
import { HttpModule } from '@angular/http';
import { TranslationModule } from 'angular-l10n';
import { FormsModule } from '@angular/forms';
import { LocalizationConfig } from './core/localization/terra-localization.config';
import { StartComponent } from './views/start/start.component';
import { StatsViewComponent } from './views/stats-view/stats-view.component';
import { StatsDataService } from './views/stats-view/stats-view.service'; // <--- imported the service

@NgModule({
    imports:      [
        BrowserModule,
        HttpModule,
        FormsModule,
        TranslationModule.forRoot(),
        TerraComponentsModule.forRoot()
    ],
    declarations: [
        PluginTerraBasicComponent,
        StartComponent,
        StatsViewComponent
    ],
    providers:    [
        LocalizationConfig,
        {
            provide:    APP_INITIALIZER,
            useFactory: initLocalization,
            deps:       [LocalizationConfig],
            multi:      true
        },
        StatsDataService // <--- added the service to providers
    ],
    bootstrap:    [
        PluginTerraBasicComponent
    ]
})
export class PluginTerraBasicModule
{
}

export function initLocalization(localizationConfig:LocalizationConfig):Function
{
    return () => localizationConfig.load();
}
</pre>
            <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
        </div>
    </div>

    <h3 id="handle-rest-calls">2. Handling REST calls</h3>
    <div class="api-docs-basics">
        <p>In this step, you learn how to get data from our database and how to handle the result.</p>
        <p>You will find all REST routes in the <strong>REST</strong> menu.</p>
        <ul>
            <li>Create three interfaces to provide a template for the REST call data.</li>
            <li>Create three variables which store the received data.</li>
            <li>Add the
                <code>StatsDataService</code>
                to the constructor.
            </li>
            <li>Create three methods to fire a REST call to the database and handle the response.</li>
            <li>The
                <code>updateData</code>
                method triggers all REST call functions and is also called at the OnInit function.
            </li>
            <li>Add the
                <code>Terra-Alert</code>
                component to display alerts.
            </li>
        </ul>
    </div>
    <div class="route-container">
        <code>src/app/views/stats-view.component.ts</code>
    </div>
    <div class="code-container">
    <pre class="prettyprint lang-js grey-back linenums code-example">
import {
    Component,
    OnInit
} from '@angular/core';
import { StatsDataService } from './stats-view.service';
import { TerraAlertComponent } from '@plentymarkets/terra-components';

interface PluginInterface
{
    name?:string;
    id?:number;
    created_at?:string;
}
interface UserInterface
{
    username?:string;
    email?:string;
}
interface WebStoreInterface
{
    id?:number;
    name?:string;
    type?:string;
}

@Component({
    selector: 'stats-view',
    template: require('./stats-view.component.html'),
    styles:   [require('./stats-view.component.scss')]
})
export class StatsViewComponent implements OnInit
{
    public plugins:Array&lt;PluginInterface&gt;;
    public user:UserInterface;
    public webStores:Array&lt;WebStoreInterface&gt;;

    private _alert:TerraAlertComponent;

    constructor(private _statsDataService:StatsDataService)
    {
        this._alert = TerraAlertComponent.getInstance();
    }

    public ngOnInit():void
    {
       this.updateData();
    }

    public updateData():void
    {
        this.createPluginData();
        this.createUserData();
        this.createWebStoreData();
        this._alert.addAlert(
            {
                msg:'Fetching data',
                type:'info',
                dismissOnTimeout:3000,
                identifier: 'info'
            });
    }

    private createPluginData():void
    {
        this.plugins = [];
        this._statsDataService.getRestCallData('/rest/plugins').subscribe((response:Array&lt;any&gt;) =>
        {
            for(let plugin of response)
            {
                this.plugins.push(
                    {
                        name: plugin.name,
                        id: plugin.id,
                        created_at: plugin.created_at
                    });
            }
        });
    }

    private createWebStoreData():void
    {
        this.webStores = [];
        this._statsDataService.getRestCallData('/rest/webstores').subscribe((response:Array&lt;any&gt;) =>
        {
            for(let store of response)
            {
                this.webStores.push(
                    {
                        id: store.id,
                        name: store.name,
                        type: store.type
                    });
            }
        });
    }

    private createUserData():void
    {
        this.user = {};
        this._statsDataService.getRestCallData('/rest/user').subscribe((response:any) =>
        {
            this.user =
                {
                    username: response.user,
                    email: response.user_email
                };
        });
    }
}

</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>
    <h3 id="display-data-at-ui">3. Displaying data at UI</h3>
    <div class="api-docs-basics">
        <p>In this step, you will print out the REST results from our component.</p>
        <p>Use the
            <a href="#terra-components-info">Terra-Components</a>
           to display your results at a back end view.
        </p>
    </div>
    <div class="route-container">
        <code>src/app/views/stats-view.component.html</code>
    </div>
    <div class="code-container">
<pre class="prettyprint lang-html grey-back linenums code-example">
&lt;terra-alert-panel&gt;&lt;/terra-alert-panel&gt;
&lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-sm-12&quot;&gt;
            &lt;terra-base-toolbar&gt;
                &lt;terra-button inputIcon=&quot;icon-refresh&quot;
                              inputTooltipText=&quot;fetch data&quot;
                              inputTooltipPlacement=&quot;right&quot;
                              (outputClicked)=&quot;updateData()&quot;&gt;
                &lt;/terra-button&gt;
            &lt;/terra-base-toolbar&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-sm-12&quot;&gt;
            &lt;terra-portlet inputPortletHeader=&quot;User information&quot;&gt;
                &lt;div class=&quot;row content&quot;&gt;
                    &lt;div class=&quot;col-xs-2&quot;&gt;
                        &lt;div class=&quot;user-information-container&quot;&gt;
                            &lt;strong&gt;Username:&lt;/strong&gt;
                            &lt;br&gt;
                            &lt;strong&gt;Email:&lt;/strong&gt;
                            &lt;br&gt;
                            &lt;strong&gt;Plugins:&lt;/strong&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;col-xs-3&quot;&gt;
                        &lt;div *ngIf=&quot;(user | json) != '{}'&quot; class=&quot;user-information-container&quot;&gt;
                            &lt;span&gt;{{ '{{user?.username}}' }}&lt;/span&gt;
                            &lt;br&gt;
                            &lt;span&gt;{{ '{{user?.email}}' }}&lt;/span&gt;
                            &lt;br&gt;
                            &lt;span&gt;{{ '{{plugins?.length}}' }}&lt;/span&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/terra-portlet&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-sm-6&quot;&gt;
            &lt;terra-portlet inputPortletHeader=&quot;Installed webstores&quot;&gt;
                &lt;div class=&quot;content&quot;&gt;
                    &lt;table&gt;
                        &lt;tr&gt;
                            &lt;th&gt;Id&lt;/th&gt;
                            &lt;th&gt;Name&lt;/th&gt;
                            &lt;th&gt;Type&lt;/th&gt;
                        &lt;/tr&gt;
                        &lt;tr *ngFor=&quot;let store of webStores&quot;&gt;
                            &lt;td&gt;{{ '{{store.id}}' }}&lt;/td&gt;
                            &lt;td&gt;{{ '{{store.name}}' }}&lt;/td&gt;
                            &lt;td&gt;{{ '{{store.type}}' }}&lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/table&gt;
                &lt;/div&gt;
            &lt;/terra-portlet&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-sm-6&quot;&gt;
            &lt;terra-portlet inputPortletHeader=&quot;Installed plugins&quot; [inputIsCollapsable]=&quot;true&quot;&gt;
                &lt;div class=&quot;content&quot;&gt;
                    &lt;table&gt;
                        &lt;tr&gt;
                            &lt;th&gt;Id&lt;/th&gt;
                            &lt;th&gt;Name&lt;/th&gt;
                            &lt;th&gt;Created at&lt;/th&gt;
                        &lt;/tr&gt;
                        &lt;tr *ngFor=&quot;let plugin of plugins&quot;&gt;
                            &lt;td&gt;{{ '{{plugin.id}}' }}&lt;/td&gt;
                            &lt;td&gt;{{ '{{plugin.name}}' }}&lt;/td&gt;
                            &lt;td&gt;{{ '{{plugin.created_at}}' }}&lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/table&gt;
                &lt;/div&gt;
            &lt;/terra-portlet&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>
    <h4>At this point of the tutorial, your Angular UI should look like this:</h4>
    <img class="img-responsive img-pretty"
         src="{{ plugin_path('PlentyPluginShowcase') }}/images/tutorials/plugin-terra-basic.png">
    <h2 id="add-ui-to-plugin">7. Adding UI to Plugin</h2>
    <div class="api-docs-basics">
        <p>You should have a working Angular application.</p>
        <p>To combine your Angular UI with the plugin, follow the
            <a href="https://developers.plentymarkets.com/tutorials/angular-ui" target="_blank">Combine Angular UI with plugin</a>
           .
        </p>
        <p>We will continue to improve this tutorial and add more features to the shown plugin.</p>
        <p>Further steps:</p>
        <p>Download or clone the complete plugin tutorial at
            <a href="https://github.com/plentymarkets/plugin-terra-basic/tree/angular_ui_tutorial" target="_blank">Github</a>
           .
        </p>
        <p>
            Public repository with a
            <a href="https://github.com/plentymarkets/plugin-payment-paypal-ui"
               target="_blank">
                plugin written in Angular
            </a>
            .
        </p>
    </div>
{% endblock %}
